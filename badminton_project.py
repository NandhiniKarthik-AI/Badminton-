# -*- coding: utf-8 -*-
"""Badminton Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cIYAAykU96xsnxU8Qnnm9FyVhK33706H
"""

from datetime import datetime, timedelta

class BadmintonCourtBookingSystem:
    def __init__(self):

        self.bookings = []
        self.max_courts = 6
        self.max_players = 12
        self.opening_time = datetime.strptime("16:30", "%H:%M")  # 4:30 PM
        self.closing_time = datetime.strptime("22:00", "%H:%M")  # 10:00 PM
        self.max_duration = timedelta(hours=1, minutes=30)  # 1.5 hours

    def _parse_time(self, time_str):
        """Helper function to parse a time string into a datetime object."""
        return datetime.strptime(time_str, "%H:%M")

    def _check_availability(self, start_time, end_time):
        """Check if there is a court available during the specified time range."""
        active_bookings = 0
        for booking in self.bookings:

            if not (end_time <= booking['start_time'] or start_time >= booking['end_time']):
                active_bookings += 1


        available_courts = self.max_courts - (active_bookings // 2)
        return available_courts > 0

    def _validate_time_window(self, start_time, end_time):
        """Ensure the booking is within the allowed time window and duration."""
        if start_time < self.opening_time or end_time > self.closing_time:
            return False, "Booking time must be between 4:30 PM and 10:00 PM."
        if end_time - start_time > self.max_duration:
            return False, "Booking cannot exceed 1.5 hours."
        return True, None

    def book_court(self, user_id, start_time_str, end_time_str):
        """Book a badminton court if possible."""

        start_time = self._parse_time(start_time_str)
        end_time = self._parse_time(end_time_str)


        is_valid_time, error_msg = self._validate_time_window(start_time, end_time)
        if not is_valid_time:
            return {"success": False, "message": error_msg}


        if not self._check_availability(start_time, end_time):
            return {"success": False, "message": "No courts available during the requested time."}


        self.bookings.append({
            "user_id": user_id,
            "start_time": start_time,
            "end_time": end_time
        })
        return {
            "success": True,
            "message": f"Court booked successfully from {start_time_str} to {end_time_str}."
        }


booking_system = BadmintonCourtBookingSystem()


result = booking_system.book_court("Nandhini", "17:00", "18:30")
print(result)


result = booking_system.book_court("user124", "22:00", "23:00")
print(result)


result = booking_system.book_court("user125", "17:00", "19:00")
print(result)